---
title: "Template for r-shinylive Quarto document (Covid Example)"
format:
  html:
    resources: 
      - shinylive-sw.js
filters:
  - shinylive
---


```{shinylive-r}
#| standalone: true
#| viewerHeight: 600
#| layout: full

library(shiny)
library(dplyr)
library(ggplot2)
library(shinyWidgets)

# Download real COVID data for Washington state counties from the New York Times GitHub repo
covid_url <- "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv"
covid_data <- read.csv(covid_url)

# Filter for Washington state and prepare the data
washington_covid_data <- covid_data %>%
  filter(state == "Washington") %>%
  select(date, county, cases) %>%
  mutate(year_month = format(as.Date(date), "%Y%m"))  # Create year_month column

# Create a vector of unique year_month values from the dataset
valid_year_months <- sort(unique(washington_covid_data$year_month))
valid_year_months_index <- seq_along(valid_year_months)

# Define the UI
ui <- fluidPage(
  titlePanel("COVID Case Counts by Month-Year in Washington Counties"),
  
  # Use fluidRow to place the slider at the top, spanning the entire page width
  fluidRow(
    column(12,  # 12 columns to span full width
      sliderTextInput("selected_year_month", 
                      "Select Year and Month:", 
                      choices = valid_year_months,  # Use year-month values directly
                      selected = "202001",  # Start with the first year-month
                      animate = animationOptions(interval = 1000, loop = FALSE))
    )
  ),
  
  # Main panel for the plot below the slider
  fluidRow(
    column(12,  # This will also span the entire width
      plotOutput("histogramPlot")
    )
  )
)


# Define the server
server <- function(input, output) {
  output$histogramPlot <- renderPlot({
    filtered_data <- washington_covid_data %>%
      filter(year_month == as.character(input$selected_year_month)) %>%
      group_by(county) %>%
      summarize(total_cases = max(cases, na.rm = TRUE))  # Get max case count for each county in the selected year_month
    
    ggplot(filtered_data, aes(x = county, y = total_cases)) +
      geom_bar(stat = "identity", fill = "steelblue") +
      labs(title = paste("COVID Cases in", input$selected_year_month),
           x = "County", 
           y = "Total Case Count") +
      theme_minimal() +
      theme(axis.text.x = element_text(angle = 45, hjust = 1))
  })
}

# Run the Shiny app
shinyApp(ui = ui, server = server)
```

## How to use Quarto to display a shinyapp for your example: 

````md
---
title: "Template for r-shinylive Quarto document (Covid Example)"
format:
  html:
    resources: 
      - shinylive-sw.js
filters:
  - shinylive
---

```{shinylive-r}
#| standalone: true
#| viewerHeight: 600
#| layout: full

library(shiny)
library(dplyr)
library(ggplot2)
library(shinyWidgets)

# Download real COVID data for Washington state counties from the New York Times GitHub repo
covid_url <- "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv"
covid_data <- read.csv(covid_url)

# Filter for Washington state and prepare the data
washington_covid_data <- covid_data %>%
  filter(state == "Washington") %>%
  select(date, county, cases) %>%
  mutate(year_month = format(as.Date(date), "%Y%m"))  # Create year_month column

# Create a vector of unique year_month values from the dataset
valid_year_months <- sort(unique(washington_covid_data$year_month))
valid_year_months_index <- seq_along(valid_year_months)

# Define the UI
ui <- fluidPage(
  titlePanel("COVID Case Counts by Month-Year in Washington Counties"),
  
  # Use fluidRow to place the slider at the top, spanning the entire page width
  fluidRow(
    column(12,  # 12 columns to span full width
      sliderTextInput("selected_year_month", 
                      "Select Year and Month:", 
                      choices = valid_year_months,  # Use year-month values directly
                      selected = "202001",  # Start with the first year-month
                      animate = animationOptions(interval = 1000, loop = FALSE))
    )
  ),
  
  # Main panel for the plot below the slider
  fluidRow(
    column(12,  # This will also span the entire width
      plotOutput("histogramPlot")
    )
  )
)


# Define the server
server <- function(input, output) {
  output$histogramPlot <- renderPlot({
    filtered_data <- washington_covid_data %>%
      filter(year_month == as.character(input$selected_year_month)) %>%
      group_by(county) %>%
      summarize(total_cases = max(cases, na.rm = TRUE))  # Get max case count for each county in the selected year_month
    
    ggplot(filtered_data, aes(x = county, y = total_cases)) +
      geom_bar(stat = "identity", fill = "steelblue") +
      labs(title = paste("COVID Cases in", input$selected_year_month),
           x = "County", 
           y = "Total Case Count") +
      theme_minimal() +
      theme(axis.text.x = element_text(angle = 45, hjust = 1))
  })
}

# Run the Shiny app
shinyApp(ui = ui, server = server)
```
````

## Step-by-step Explanation:
<br>
This is a demo of a Shiny app embedded in a Quarto document using the `shinylive` filter. The app displays COVID case counts by month-year in Washington state counties. Use the slider to select a month-year and see the case counts for each county in that month-year period.
<br>

The code first import the libraries:  
```{r}
#| eval: false

library(shiny)
library(dplyr)
library(ggplot2)
library(shinyWidgets)
```

Next, it downloads real COVID data for Washington state counties from the New York Times GitHub repo and prepares the data. The data is filtered for Washington state and a new column `year_month` is created to group the data by month-year. 

```{r}
#| eval: false
covid_url <- "https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv"
covid_data <- read.csv(covid_url)

# Filter for Washington state and prepare the data
washington_covid_data <- covid_data %>%
  filter(state == "Washington") %>%
  select(date, county, cases) %>%
  mutate(year_month = format(as.Date(date), "%Y%m"))  # Create year_month column

# Create a vector of unique year_month values from the dataset
valid_year_months <- sort(unique(washington_covid_data$year_month))
```

Now, We can create a simple UI with shiny with a slider of values from the "valid_year_months" and a histogram output to display the data for the selected period. 

```{r}
#| eval: false
ui <- fluidPage(
  titlePanel("COVID Case Counts by Month-Year in Washington Counties"),
  
  # Use fluidRow to place the slider at the top, spanning the entire page width
  fluidRow(
    column(12,  # 12 columns to span full width
      sliderTextInput("selected_year_month", 
                      "Select Year and Month:", 
                      choices = valid_year_months,  # Use year-month values directly
                      selected = "202001",  # Start with the first year-month
                      animate = animationOptions(interval = 1000, loop = FALSE))
    )
  ),
  
  # Main panel for the plot below the slider
  fluidRow(
    column(12,  # This will also span the entire width
      plotOutput("histogramPlot")
    )
  )
)

```

Finally, we define the server function to render the plot based on the selected month-year. The plot shows the total case count for each county in the selected month-year. noted that the input$selected_year_month corresponds to the value of UI slider defined above. We first filtered the data to that period of time and get the max of number of cases. (Which is equvalent to the cumulated number of cases during that month-year.) ggplot is used to create the bar plot and the County column is used in X axis.

```{r}
#| eval: false
server <- function(input, output) {
  output$histogramPlot <- renderPlot({
    filtered_data <- washington_covid_data %>%
      filter(year_month == as.character(input$selected_year_month)) %>%
      group_by(county) %>%
      summarize(total_cases = max(cases, na.rm = TRUE))  # Get max case count for each county in the selected year_month
    
    ggplot(filtered_data, aes(x = county, y = total_cases)) +
      geom_bar(stat = "identity", fill = "steelblue") +
      labs(title = paste("COVID Cases in", input$selected_year_month),
           x = "County", 
           y = "Total Case Count") +
      theme_minimal() +
      theme(axis.text.x = element_text(angle = 45, hjust = 1))
  })
}
```